---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: menu
  name: menu
spec:
  # 副本数
  replicas: 1
  selector:
    matchLabels:
      app: menu
  template:
    metadata:
      labels:
        app: menu
    spec:
      containers:
      - image: 839412644zj/menu:20220631
        imagePullPolicy: IfNotPresent
        name: menu
        ports:
        - name: menu
          containerPort: 8000
        volumeMounts:
          - mountPath: /home/menu/menu/settings.py
            name: conf
            subPath: settings.py
          - mountPath: /etc/localtime
            name: timezone
      - image: 839412644zj/menu:nginx
        imagePullPolicy: IfNotPresent
        name: nginx
        ports:
          - containerPort: 8080
            name: nginx
        volumeMounts:
          - mountPath: /etc/nginx/conf.d/nginx.conf
            name: conf
            subPath: nginx.conf
          - mountPath: /etc/localtime
            name: timezone
      restartPolicy: Always
      volumes:
        - name: conf
          configMap:
            name: menu
            items:
              - key: settings.py
                path: settings.py
              - key: nginx.conf
                path: nginx.conf
        - name: timezone
          hostPath:
            path: /usr/share/zoneinfo/Asia/Shanghai
---
apiVersion: v1
kind: Service
metadata:
  name: menu
spec:
  type: NodePort
  selector:
    app: menu
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 8000
      name: menu
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: menu
data:
  nginx.conf: |
    server {
            listen 8080;
            server_name localhost;

            location / {
                    proxy_http_version      1.1;
                    proxy_cache_bypass      $http_upgrade;
                    proxy_set_header Upgrade                        $http_upgrade;
                    proxy_set_header Connection             "upgrade";
                    proxy_set_header Host                           $host;
                    proxy_set_header X-Real-IP                      $remote_addr;
                    proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto      $scheme;
                    proxy_set_header X-Forwarded-Host       $host;
                    proxy_set_header X-Forwarded-Port       $server_port;
                    proxy_pass http://127.0.0.1:8000;
            }
            location /static {
                    root /home;
            }
    }
  settings.py: |
    from pathlib import Path
    import os

    BASE_DIR = Path(__file__).resolve().parent.parent

    SECRET_KEY = 'django-insecure-_b1*+gyr(@x2qi)9*)hpbg=$3--o=&se40ckmsx-4p3dq!sx(l'

    DEBUG = False

    ALLOWED_HOSTS = ['*']

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'app01'
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'menu.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [BASE_DIR / 'templates']
            ,
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'menu.wsgi.application'

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
        # 'default': {
        #     'ENGINE': 'django.db.backends.mysql',
        #     'NAME': 'menu',
        #     'USER': 'menu_rw',
        #     'PASSWORD': '8KzKTYzt7sJDAGcX27KFpkJ',
        #     'HOST': 'rm-2ze1k37224f7ub84z.mysql.rds.aliyuncs.com',
        #     'PORT': '3306',
        # }
    }

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]

    LANGUAGE_CODE = 'zh-hans'

    TIME_ZONE = 'Asia/Shanghai'

    USE_I18N = True

    USE_TZ = True

    STATIC_URL = 'static/'
    # STATIC_ROOT = 'static/'
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
    ]
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media').replace('\\', '/')

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
    COMPANY = [
        ("0","业务版块01"),
        ("1", "业务版块02"),
    ]
    COMPANY_ENV = [
        ("pro", "PRO生产环境"),
        ("fat", "FAT测试环境"),
        ("uat", "UAT演示环境"),
    ]
    AUTHOR_KEY = "MTc2MDE5NzA2NjUyMDU0NDg1"


